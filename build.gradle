import com.google.gson.Gson
import com.google.gson.GsonBuilder

import java.nio.charset.StandardCharsets

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url = 'https://maven.parchmentmc.org' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '6.0.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id "com.modrinth.minotaur" version "2.+"
    id 'org.spongepowered.mixin' version '[0.7,0.8)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

version = "${version}"
group = 'com.github.IriDark'
base {
    archivesName = project.name
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
sourceSets.main.resources { srcDir 'src/generated/resources' }
minecraft {
    mappings channel: 'parchment', version: '2023.09.03-1.20.1'
    copyIdeResources = true
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            jvmArg "-Dmixin.env.disableRefMap=true"
            mods {
                valoria {
                    source sourceSets.main
                }
            }
        }

        client{
            args "--username", "IriDark_"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.enabledGameTestNamespaces', "valoria"
        }

        server {
            property 'forge.enabledGameTestNamespaces', "valoria"
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', "valoria"
        }

        data {
            workingDirectory project.file('run-data')
            args '--mod', 'valoria', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

mixin {
    add sourceSets.main, "valoria.refmap.json"
    config "valoria.mixins.json"
    dumpTargetOnFailure true
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
    }
    maven { url = "https://maven.komaru.ru/repository/maven-releases" }
    maven { url "https://maven.theillusivec4.top/"}
    maven { url "https://cursemaven.com"}
    maven { url "https://maven.blamejared.com"}
    maven {
        url = "https://maven.architectury.dev"
        content {
            includeGroup "dev.architectury"
        }
    }

    maven {
        url "https://maven.latvian.dev/releases"
        content {
            includeGroup "dev.latvian.mods"
            includeGroup "dev.latvian.apps"
        }
    }}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    // API's
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}+${minecraft_version}:api")
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    //implementation fg.deobf("curse.maven:farmers-delight-398521:4679319")
    implementation fg.deobf("curse.maven:jade-324717:4986594")
    implementation fg.deobf("curse.maven:just-enough-resources-jer-240630:5057220")
    runtimeOnly fg.deobf("pro.komaru:Tridot:${minecraft_version}-${tridot_version}")
    compileOnly fg.deobf("pro.komaru:Tridot:${minecraft_version}-${tridot_version}:api")
    
    implementation fg.deobf("dev.latvian.mods:kubejs-forge:${kubejs_version}")
    implementation fg.deobf("dev.latvian.mods:rhino-forge:${rhino_version}")
    implementation fg.deobf("dev.architectury:architectury-forge:${architectury_version}")

    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}+${minecraft_version}")
    runtimeOnly fg.deobf("curse.maven:just-enough-repair-materials-1241244:6415175")

    runtimeOnly fg.deobf("curse.maven:cyanide-541676:5778405")

    // client sided
    runtimeOnly fg.deobf("maven.modrinth:journeymap:1.20.1-5.10.2-forge")
    runtimeOnly fg.deobf("maven.modrinth:legendary-tooltips:1.4.5") //breaks nbt, fix will be released later by Grend
    runtimeOnly fg.deobf("curse.maven:appleskin-248787:4770828")
    runtimeOnly fg.deobf("curse.maven:prism-lib-638111:4627141")
    runtimeOnly fg.deobf("maven.modrinth:iceberg:1.1.13")
    runtimeOnly fg.deobf("curse.maven:advanced-xray-256256:4840340")
    runtimeOnly fg.deobf("curse.maven:model-gap-fix-676136:4607206")
    runtimeOnly fg.deobf("curse.maven:just-enough-effect-descriptions-jeed-532286:4978810")

    //runtimeOnly fg.deobf("maven.modrinth:embeddium:0.3.31+mc1.20.1")
    //untimeOnly fg.deobf("maven.modrinth:embeddiumplus:1.20.1-v1.2.13")
    //runtimeOnly fg.deobf("maven.modrinth:oculus:1.20.1-1.7.0")
}

jar {
    manifest {
        attributes(["Specification-Title"     : project.name,
                    "Specification-Vendor"    : "IriDark",
                    "Specification-Version"   : 1,
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : project.version,
                    "Implementation-Vendor"   : "IriDark",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    "MixinConfigs": "valoria.mixins.json"],)
    }
}

static InputStreamReader createInput(File f) throws FileNotFoundException {
    return new InputStreamReader(new FileInputStream(f), StandardCharsets.UTF_8)
}

static OutputStreamWriter createOutput(File f) throws FileNotFoundException {
    return new OutputStreamWriter(new FileOutputStream(f), StandardCharsets.UTF_8)
}

// Thanks to Skoow for helping with this
task updateResources {
    doLast {
        File resourcesFolder = new File("src/main/resources"); resourcesFolder.mkdir()
        File langFolder = new File(resourcesFolder, "assets/valoria/lang"); langFolder.mkdir()
        File mainLangJson = new File(langFolder, "en_us.json"); mainLangJson.createNewFile()
        Gson gson = new GsonBuilder().setPrettyPrinting().disableHtmlEscaping().create()
        TreeMap<String,String> EN_US = gson.fromJson(createInput(mainLangJson), TreeMap<String,String>.class)
        if(EN_US == null) {
            println "Skipping langFile because of incorrect structure " + mainLangJson.getName()
            return
        }

        File[] otherLangs = langFolder.listFiles( (FileFilter) (f) -> {return f != mainLangJson && f.isFile() && f.getName().endsWith(".json")})
        println "\u001B[32m- Comparing langs with:\u001B[0m " + mainLangJson.getName()
        for (final File otherLang in otherLangs) {
            InputStreamReader reader = createInput(otherLang)
            TreeMap<String,String> LANG = gson.fromJson(reader, TreeMap<String,String>.class)
            reader.close();
            if(LANG == null) {
                println "Skipping langFile because of incorrect structure " + otherLang.getName()
                continue
            }

            EN_US.forEach(LANG::putIfAbsent)
            OutputStreamWriter writer = createOutput(otherLang)
            gson.toJson(LANG, TreeMap<String, String>.class, writer)
            writer.close()
            println "\u001B[32m- Compared lang file\u001B[0m " + "\u001B[36m" + otherLang.getName() + "\u001B[0m"
        }
    }
}

jar.finalizedBy('reobfJar')
tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

task apiJar(type: Jar) {
    archiveClassifier.set('api')
    from sourceSets.main.allSource
    from sourceSets.main.output
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task javadocJar(type: Jar) {
    dependsOn javadoc
    from javadoc.destinationDir
    archiveClassifier.set('javadoc')
}

artifacts {
    archives sourcesJar
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
            artifact sourcesJar
            artifact apiJar
        }
    }

    repositories{
        maven{
            url "https://maven.komaru.ru/repository/maven-releases/"
            credentials{
                username "admin"
                password System.getenv("maventoken")
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

modrinth {
    token = System.getenv("modrinthtoken") // Remember to have the MODRINTH_TOKEN environment variable set or else this will fail - just make sure it stays private!
    projectId = "valoria"
    //debugMode = true
    versionNumber = "${version}"
    versionType = "beta"
    versionName = "Dev Build - ${version}"
    uploadFile = tasks.jar
    additionalFiles = [sourcesJar, javadocJar]
    changelog = "Just a DevBuild to test things, its some sorta like minecraft snapshots to find bugs and report them"
    dependencies {
        required.project "fluffy-fur"
        required.project "curios"
    }
}